How exactly does buildroot know the proper way to make our aesdsocket file?

It's based on the toolchain configuration for buildroot, which is setup for us automagically on the architecture configurations in the defconfig file.

configs/qemu_aarch64_virt_defconfig:2
"BR2_aarch64=y"

------------------------------------------BUILDROOT OUTPUT------------------------------------------------
Buildroot output is stored in a single directory, output/. This directory contains several subdirectories:

-images/ where all the images (kernel image, bootloader and root filesystem images) are stored. These are the files you need to put on your target system.

-build/ where all the components are built (this includes tools needed by Buildroot on the host and packages compiled for the target). This directory contains one subdirectory for each of these components.

-host/ contains both the tools built for the host, and the sysroot of the target toolchain. The former is an installation of tools compiled for the host that are needed for the proper execution of Buildroot, including the cross-compilation toolchain. The latter is a hierarchy similar to a root filesystem hierarchy. It contains the headers and libraries of all user-space packages that provide and install libraries used by other packages. However, this directory is not intended to be the root filesystem for the target: it contains a lot of development files, unstripped binaries and libraries that make it far too big for an embedded system. These development files are used to compile libraries and applications for the target that depend on other libraries.

-staging/ is a symlink to the target toolchain sysroot inside host/, which exists for backwards compatibility.

-target/ which contains almost the complete root filesystem for the target: everything needed is present except the device files in /dev/ (Buildroot can’t create them because Buildroot doesn’t run as root and doesn’t want to run as root). Also, it doesn’t have the correct permissions (e.g. setuid for the busybox binary). Therefore, this directory should not be used on your target. Instead, you should use one of the images built in the images/ directory. If you need an extracted image of the root filesystem for booting over NFS, then use the tarball image generated in images/ and extract it as root. Compared to staging/, target/ contains only the files and libraries needed to run the selected target applications: the development files (headers, etc.) are not present, the binaries are stripped.

--------------------------------------------ENABLING WIFI ON RPI------------------------------------------------------
https://rohitsw.wordpress.com/2016/12/17/building-a-linux-filesystem-on-raspberry-pi-3/
